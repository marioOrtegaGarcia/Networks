WHERE WE AT DOC

TO DO
* finish sending SYN packet from connect()
	* Figure out memcpy for makeTCPPack
	* Figure out how to put TCPPack as payload in Packet
* Receive SYN packets
	* reply with SYN + ACK
	* Change state to ESTABLISHED


	--TOMORROW MORNING --
* Finish Transport.read()
	*Finish Correcting IF statements
* Finish writing down Transport.write()
* Find somewhere to initialize lastAck / lastRcvd / lastSent / lastWritten / nextExpected

* Begin sending data
	* Partition payload into small chunks
	* wait for ACK before sending another packet


TO FIX

* Getting errors while attempting to work out the handshake
	* Problems with tcp_packet pointers also getting invalid type argument of `unary *' error
	* Stuck with sending any packs
		* when to Transport.read()/Transport.write()???
* Attempting writing a send function
	* Getting invalid type argument of `unary *' error




~~~~~~~~~~~~~~~~~~~ Receive.receive ~~~~~~~~~~~~~~~~~~~
* Size of actual packet is currently 8, but we are expecting 28













11/30 WWA
* Got sending to partially work
	* check bind to see if we need to set socket.dest.port and socket.dest.addr
	* Make sure bind is inserting the socket to the hash and what to do if its not there

	* Need to go back and recheck how we set our values, running just not correct
		* Check what numBytes is doing and how we set it

	* We are fixing up how to properly handle

12/4

* currently sending everything at once
	*need to modify stopWait such that we only send packets after recieving the ACK
	*from WriteTimer create loop from 0 - transfer: call stopWait - sends single packet - return
	*startOneShot(RTT) - times sent packet
		- if it fires, resend current Data
		- otherwise ack must be recieved in time
			--when ack is received, check tcp->ack
				if ack = IPseq+1
					send IPseq+1 packet
global ack = null;
stopWait
 	send packs
	isAcked()

		receive function sets ack
		
		startOneShot
			-resend
